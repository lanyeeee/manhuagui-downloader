// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async getConfig() : Promise<Config> {
    return await TAURI_INVOKE("get_config");
},
async saveConfig(config: Config) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_config", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async login(username: string, password: string) : Promise<Result<string, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("login", { username, password }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getUserProfile() : Promise<Result<UserProfile, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_user_profile") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async search(keyword: string, pageNum: number) : Promise<Result<SearchResult, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search", { keyword, pageNum }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getComic(id: number) : Promise<Result<Comic, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_comic", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadChapters(chapters: ChapterInfo[]) : Promise<void> {
    await TAURI_INVOKE("download_chapters", { chapters });
},
async getFavorite(pageNum: number) : Promise<Result<GetFavoriteResult, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_favorite", { pageNum }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveMetadata(comic: Comic) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_metadata", { comic }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDownloadedComics() : Promise<Result<Comic[], CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_downloaded_comics") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async exportCbz(comic: Comic) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("export_cbz", { comic }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async exportPdf(comic: Comic) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("export_pdf", { comic }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateDownloadedComics() : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_downloaded_comics") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getLogsDirSize() : Promise<Result<number, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_logs_dir_size") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async showPathInFileManager(path: string) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("show_path_in_file_manager", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async pauseDownloadTask(chapterId: number) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pause_download_task", { chapterId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async resumeDownloadTask(chapterId: number) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("resume_download_task", { chapterId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cancelDownloadTask(chapterId: number) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cancel_download_task", { chapterId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
downloadEvent: DownloadEvent,
downloadTaskEvent: DownloadTaskEvent,
exportCbzEvent: ExportCbzEvent,
exportPdfEvent: ExportPdfEvent,
logEvent: LogEvent,
updateDownloadedComicsEvent: UpdateDownloadedComicsEvent
}>({
downloadEvent: "download-event",
downloadTaskEvent: "download-task-event",
exportCbzEvent: "export-cbz-event",
exportPdfEvent: "export-pdf-event",
logEvent: "log-event",
updateDownloadedComicsEvent: "update-downloaded-comics-event"
})

/** user-defined constants **/



/** user-defined types **/

export type ChapterInfo = { 
/**
 * 章节id
 */
chapterId: number; 
/**
 * 章节标题
 */
chapterTitle: string; 
/**
 * 此章节有多少页
 */
chapterSize: number; 
/**
 * 以order为前缀的章节标题
 */
prefixedChapterTitle: string; 
/**
 * 漫画id
 */
comicId: number; 
/**
 * 漫画标题
 */
comicTitle: string; 
/**
 * 组名(单话、单行本、番外篇)
 */
groupName: string; 
/**
 * 此章节对应的group有多少章节
 */
groupSize: number; 
/**
 * 此章节在group中的顺序
 */
order: number; 
/**
 * 漫画状态(连载中/已完结)
 */
comicStatus: string; 
/**
 * 是否已下载
 */
isDownloaded?: boolean | null }
export type Comic = { 
/**
 * 漫画id
 */
id: number; 
/**
 * 漫画标题
 */
title: string; 
/**
 * 漫画副标题
 */
subtitle: string | null; 
/**
 * 封面链接
 */
cover: string; 
/**
 * 漫画状态(连载中/已完结)
 */
status: string; 
/**
 * 上次更新时间
 */
updateTime: string; 
/**
 * 出版年份
 */
year: number; 
/**
 * 地区
 */
region: string; 
/**
 * 类型
 */
genres: string[]; 
/**
 * 作者
 */
authors: string[]; 
/**
 * 漫画别名
 */
aliases: string[]; 
/**
 * 简介
 */
intro: string; 
/**
 * 组名(单话、单行本...)->章节信息
 */
groups: { [key in string]: ChapterInfo[] } }
export type ComicInFavorite = { 
/**
 * 漫画id
 */
id: number; 
/**
 * 漫画标题
 */
title: string; 
/**
 * 漫画封面链接
 */
cover: string; 
/**
 * 最近更新时间，两种格式
 * - 2024-12-13
 * - x分钟前
 */
lastUpdate: string; 
/**
 * 上次阅读时间，两种格式
 * - 2024-12-13
 * - x分钟前
 */
lastRead: string }
export type ComicInSearch = { 
/**
 * 漫画id
 */
id: number; 
/**
 * 漫画标题
 */
title: string; 
/**
 * 漫画副标题
 */
subtitle: string | null; 
/**
 * 封面链接
 */
cover: string; 
/**
 * 漫画状态(连载中/已完结)
 */
status: string; 
/**
 * 上次更新时间
 */
updateTime: string; 
/**
 * 出版年份
 */
year: number; 
/**
 * 地区
 */
region: string; 
/**
 * 类型
 */
genres: string[]; 
/**
 * 作者
 */
authors: string[]; 
/**
 * 漫画别名
 */
aliases: string[]; 
/**
 * 简介
 */
intro: string }
export type CommandError = { err_title: string; err_message: string }
export type Config = { cookie: string; downloadDir: string; exportDir: string; downloadIntervalSec: number; enableFileLogger: boolean }
export type DownloadEvent = { event: "Speed"; data: { speed: string } } | { event: "Sleeping"; data: { chapterId: number; remainingSec: number } }
export type DownloadTaskEvent = { state: DownloadTaskState; chapterInfo: ChapterInfo; downloadedImgCount: number; totalImgCount: number }
export type DownloadTaskState = "Pending" | "Downloading" | "Paused" | "Cancelled" | "Completed" | "Failed"
export type ExportCbzEvent = { event: "Start"; data: { uuid: string; comicTitle: string; total: number } } | { event: "Progress"; data: { uuid: string; current: number } } | { event: "End"; data: { uuid: string } }
export type ExportPdfEvent = { event: "CreateStart"; data: { uuid: string; comicTitle: string; total: number } } | { event: "CreateProgress"; data: { uuid: string; current: number } } | { event: "CreateEnd"; data: { uuid: string } } | { event: "MergeStart"; data: { uuid: string; comicTitle: string; total: number } } | { event: "MergeProgress"; data: { uuid: string; current: number } } | { event: "MergeEnd"; data: { uuid: string } }
export type GetFavoriteResult = { comics: ComicInFavorite[]; current: number; total: number }
export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }
export type LogEvent = { timestamp: string; level: LogLevel; fields: { [key in string]: JsonValue }; target: string; filename: string; line_number: number }
export type LogLevel = "TRACE" | "DEBUG" | "INFO" | "WARN" | "ERROR"
export type SearchResult = { comics: ComicInSearch[]; current: number; total: number }
export type UpdateDownloadedComicsEvent = { event: "GettingComics"; data: { total: number } } | { event: "ComicGot"; data: { current: number; total: number } } | { event: "DownloadTaskCreated" }
export type UserProfile = { username: string; avatar: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
